// g++ main.cpp
#include <stdio.h>
#include <stdlib.h>

#define GLFW_INCLUDE_ES2
#include <GLFW/glfw3.h>

#define daN( p ) ( sizeof(p)/sizeof(*p) )
#define dMIN(a,b) ((a)<(b)? (a) : (b) )
#define dMAX(a,b) ((a)>(b)? (a) : (b) )

static const GLuint WIDTH = 800; // #Compression yes
static const GLuint HEIGHT = 600;

static const GLfloat aVX3x3[] = {
     0.0f,  0.5f, 0.0f,
     0.5f, -0.5f, 0.0f,
    -0.5f, -0.5f, 0.0f,
};

static const GLfloat aGPjUh3szeg[] = {
    // bogár
    -0.212119, 1.187391, 0.076047, -0.212097, 1.288853, 0.050374, -0.128699, 1.283358, 0.076047,
    -0.212119, 1.187391, 0.076047, -0.320271, 1.277830, 0.076047, -0.212097, 1.288853, 0.050374,
    // pilla 2
    -0.222557, 1.376603, 0.076047, -0.212097, 1.288853, 0.050374, -0.320271, 1.277830, 0.076047,
    -0.222557, 1.376603, 0.076047, -0.128699, 1.283358, 0.076047, -0.212097, 1.288853, 0.050374,
    // árny 4 
    -0.250724, 1.535350, 0.009185, -0.001433, 1.286394, 0.011507, -0.128699, 1.283358, 0.076047,
    -0.250724, 1.535350, 0.009185, -0.128699, 1.283358, 0.076047, -0.222557, 1.376603, 0.076047,
    -0.571030, 1.411017, 0.142946, -0.691821, 1.513225, 0.183228, -0.922872, 1.294562, 0.171197,
    -0.001433, 0.792385, -0.12957, -0.215967, 1.056586, -0.04057, 0.001029, 1.086562, -0.088109,
    -0.222557, 1.376603, 0.076047, -0.368306, 1.458451, -0.01648, -0.250724, 1.535350, 0.009185,
    
    -0.222557, 1.376603, 0.076047, -0.320271, 1.277830, 0.076047, -0.458044, 1.295058, 0.049675,
    -0.222557, 1.376603, 0.076047, -0.458044, 1.295058, 0.049675, -0.368306, 1.458451, -0.016488,
    -0.306433, 0.849595, 0.011889, -0.334900, 0.925167, 0.134876, -0.462918, 0.718686, 0.123603,
    -0.204404, 0.862224, -0.053164, -0.206469, 0.937339, -0.103982, -0.001433, 0.792385, -0.129571,
    -0.215967, 1.056586, -0.04057, -0.529899, 1.094359, 0.117130, -0.334900, 0.925167, 0.134876,
    
    -0.215967, 1.056586, -0.04057, -0.458044, 1.295058, 0.049675, -0.529899, 1.094359, 0.117130,
    -0.215967, 1.056586, -0.04057, -0.001433, 1.286394, 0.011507, 0.001029, 1.086562, -0.088109,
    -0.306433, 0.849595, 0.011889, -0.204404, 0.862224, -0.053164, -0.206469, 0.937339, -0.103982,
    -0.001433, 0.792385, -0.129571, -0.003497, 0.772069, -0.108536, -0.103951, 0.805533, -0.093133,
    -0.462918, 0.718686, 0.123603, -0.247015, 0.578868, 0.009185, -0.255218, 0.693825, -0.008549,
    
    -0.255218, 0.693825, -0.00854, -0.306433, 0.849595, 0.011889, -0.462918, 0.718686, 0.123603,
    
    // fog 20
    -0.126444, 0.602536, -0.06232, -0.247015, 0.578868, 0.009185, -0.240005, 0.502295, 0.009185,
    -0.126444, 0.602536, -0.062328, -0.240005, 0.502295, 0.009185, -0.117587, 0.495992, -0.027105,
    0.000837, 0.603569, -0.090033, -0.126444, 0.602536, -0.062328, -0.117587, 0.495992, -0.027105,
    0.000837, 0.603569, -0.090033, -0.117587, 0.495992, -0.027105, -0.001641, 0.497025, -0.058840,
    // frufru 24
    -0.002228, 1.751474, 0.13807, 0.118616, 1.746063, 0.010346, 0.112132, 1.637410, 0.011507,
    -0.119234, 1.631028, 0.14163, -0.002228, 1.751474, 0.13807, 0.112132, 1.637410, 0.011507,
    -0.119234, 1.631028, 0.14163, 0.112132, 1.637410, 0.011507, -0.004874, 1.516963, 0.22238,
    // pofa 27
    
    -0.206469, 0.937339, -0.103982, -0.001433, 0.792385, -0.129571, -0.215967, 1.056586, -0.040576,
    -0.001641, 0.497025, -0.058840, -0.117587, 0.495992, -0.027105, -0.121927, 0.434285, -0.074261,
    -0.255218, 0.693825, -0.008549, -0.247015, 0.578868, 0.009185, -0.126444, 0.602536, -0.062328,
    -0.124354, 0.663681, -0.104505, 0.000837, 0.603569, -0.090033, -0.001330, 0.657403, -0.157727,
    -0.121927, 0.434285, -0.074261, -0.118982, 0.370974, 0.009185, -0.045823, 0.372104, -0.026001,
    
    -0.000402, 0.435318, -0.095925, -0.121927, 0.434285, -0.074261, -0.045823, 0.372104, -0.026001,
    -0.204404, 0.862224, -0.053164, -0.124354, 0.663681, -0.104505, -0.103951, 0.805533, -0.093133,
    -0.103951, 0.805533, -0.093133, -0.124354, 0.663681, -0.104505, -0.001330, 0.657403, -0.157727,
    -0.458044, 1.295058, 0.049675, -0.922872, 1.294562, 0.171197, -0.693431, 1.057193, 0.189058,
    -0.458044, 1.295058, 0.049675, -0.368306, 1.458451, -0.01648, -0.452385, 1.531050, 0.065542,
    
    -0.000402, 0.435318, -0.09592, -0.045823, 0.372104, -0.02600, 0.000837, 0.373137, -0.053163,
    -0.045823, 0.372104, -0.02600, -0.118982, 0.370974, 0.009185, -0.103680, 0.242342, 0.047579,
    -0.255218, 0.693825, -0.008549, -0.126444, 0.602536, -0.062328, -0.124354, 0.663681, -0.104505,
    -0.121927, 0.434285, -0.07426, -0.195187, 0.436871, 0.016957, -0.118982, 0.370974, 0.009185,
    -0.458044, 1.295058, 0.049675, -0.452385, 1.531050, 0.065542, -0.571030, 1.411017, 0.142946,
    
    -0.001433, 0.792385, -0.129571, -0.103951, 0.805533, -0.093133, -0.204404, 0.862224, -0.053164,
    -0.204404, 0.862224, -0.053164, -0.255218, 0.693825, -0.008549, -0.124354, 0.663681, -0.104505,
     0.000837, 0.373137, -0.053163, -0.045823, 0.372104, -0.02600, -0.051683, 0.121964, 0.047579,
     0.000837, 0.373137, -0.05316, -0.051683, 0.121964, 0.04757, 0.003296, 0.036274, 0.059776,
    -0.255218, 0.693825, -0.00854, -0.204404, 0.862224, -0.05316, -0.306433, 0.849595, 0.011889,

    -0.001641, 0.497025, -0.058840, -0.121927, 0.434285, -0.074261, -0.000402, 0.435318, -0.095925,
    -0.117587, 0.495992, -0.02710, -0.240005, 0.502295, 0.009185, -0.195187, 0.436871, 0.016957,
    -0.117587, 0.495992, -0.027105, -0.195187, 0.436871, 0.016957, -0.121927, 0.434285, -0.074261,
    -0.215967, 1.056586, -0.04057, -0.334900, 0.925167, 0.134876, -0.306433, 0.849595, 0.011889,
    -0.215967, 1.056586, -0.040576, -0.306433, 0.849595, 0.011889, -0.206469, 0.937339, -0.103982,
    
    -0.368306, 1.458451, -0.01648, -0.250724, 1.535350, 0.009185, -0.346584, 1.635184, 0.187538,
    -0.001433, 1.286394, 0.011507, -0.250724, 1.535350, 0.009185, -0.119234, 1.631028, 0.141635,
    -0.001433, 1.286394, 0.011507, -0.119234, 1.631028, 0.141635, -0.004874, 1.516963, 0.222386,
    -0.368306, 1.458451, -0.01648, -0.346584, 1.635184, 0.187538, -0.452385, 1.531050, 0.065542,
    -0.458044, 1.295058, 0.049675, -0.571030, 1.411017, 0.142946, -0.922872, 1.294562, 0.171197,
    
    -0.212119, 1.187391, 0.076047, -0.128699, 1.283358, 0.076047, -0.001433, 1.286394, 0.011507,
    -0.212119, 1.187391, 0.076047, -0.001433, 1.286394, 0.011507, -0.215967, 1.056586, -0.040576,
    -0.215967, 1.056586, -0.04057, -0.458044, 1.295058, 0.049675, -0.320271, 1.277830, 0.076047,
    -0.215967, 1.056586, -0.04057, -0.320271, 1.277830, 0.076047, -0.212119, 1.187391, 0.076047,
    
    // szarv 61
    -0.452385, 1.531050, 0.065542, -0.456260, 1.777417, 0.187538, -0.586110, 1.668437, 0.078310,
    -0.717196, 1.794931, 0.081601, -0.562477, 1.889209, 0.187538, -0.672975, 1.988156, 0.212159,
    -0.717196, 1.794931, 0.081601, -0.672975, 1.988156, 0.212159, -0.826874, 1.900018, 0.156416,
    -0.826874, 1.900018, 0.156416, -0.947194, 1.994193, 0.327390, -0.955083, 1.770293, 0.228350,
    -0.826874, 1.900018, 0.156416, -0.672975, 1.988156, 0.212159, -0.947194, 1.994193, 0.327390,
    
    -0.691821, 1.513225, 0.183228, -0.827065, 1.644340, 0.187538, -0.941662, 1.517355, 0.105508,
    -0.452385, 1.531050, 0.065542, -0.691821, 1.513225, 0.183228, -0.571030, 1.411017, 0.142946,
    -0.717196, 1.794931, 0.081601, -0.826874, 1.900018, 0.156416, -0.955083, 1.770293, 0.228350,
    -0.717196, 1.794931, 0.081601, -0.955083, 1.770293, 0.228350, -0.827065, 1.644340, 0.187538,
    -0.452385, 1.531050, 0.065542, -0.346584, 1.635184, 0.187538, -0.456260, 1.777417, 0.187538,
    
    
    -0.103951, 0.805533, -0.093133, -0.001330, 0.657403, -0.157727, -0.003497, 0.772069, -0.108536,
    -0.586110, 1.668437, 0.078310, -0.456260, 1.777417, 0.187538, -0.562477, 1.889209, 0.187538,
    -0.586110, 1.668437, 0.078310, -0.562477, 1.889209, 0.187538, -0.717196, 1.794931, 0.081601,
    -0.124354, 0.663681, -0.10450, -0.126444, 0.602536, -0.06232, 0.000837, 0.603569, -0.090033,
    -0.045823, 0.372104, -0.02600, -0.103680, 0.242342, 0.047579, -0.051683, 0.121964, 0.047579,
    
    -0.717196, 1.794931, 0.081601, -0.827065, 1.644340, 0.187538, -0.691821, 1.513225, 0.183228,
    -0.717196, 1.794931, 0.081601, -0.691821, 1.513225, 0.183228, -0.586110, 1.668437, 0.078310,
    -0.452385, 1.531050, 0.065542, -0.586110, 1.668437, 0.078310, -0.691821, 1.513225, 0.183228,
    

};
#define dVX3xJUHn daN(aGPjUh3szeg)
static const int n3szeg = dVX3xJUHn/3;
static const int aKERix[] = {
    0,          //  bogar  
    2,          // pilla
    4,          //  árny
    20,         // fog
    24,         // frufru
    27,         // pofa
    61,         // tülök
    n3szeg/3,   // vége
};

static const GLchar* asGLSLvx[2] = {
    "#version 100\n"
    "attribute vec3 position;\n"
    "void main() {\n"
    "   gl_Position = vec4( position.xy+vec2(0.0,-1.0), 0.0, 1.0);\n"
    "}\n",

    "#version 100\n" // mirror X
    "attribute vec3 position;\n"
    "void main() {\n"
    "   gl_Position = vec4( position.xy*vec2(-1.0,1.0)+vec2(0.0,-1.0), 0.0, 1.0);\n"
    "}\n",
};

static const GLchar* asGLSLfr[] = {
    "#version 100\n"    // bogar
    "void main() {\n"
    "   gl_FragColor = vec4(0.0172, 0.1243, 0.01, 1.0);\n"
    "}\n",

    "#version 100\n"    // pilla
    "void main() {\n"
    "   gl_FragColor = vec4(0.33, 0.1, 0.5, 1.0);\n"
    "}\n",

    "#version 100\n"   // árny 
    "void main() {\n"
    "   gl_FragColor = vec4(0.21, 0.0, 0.25, 1.0);\n"
    "}\n",

    "#version 100\n"    // fog
    "void main() {\n"
    "   gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n"
    "}\n",

    "#version 100\n"    // frufru
    "void main() {\n"
    "   gl_FragColor = vec4(1.0, 0.77, 0.5, 1.0);\n"
    "}\n",

    "#version 100\n"    // pofa
    "void main() {\n"
    "   gl_FragColor = vec4(0.33, 0.1, 0.5, 1.0);\n"
    "}\n",

    "#version 100\n"    // tülök
    "void main() {\n"
    "   gl_FragColor = vec4(0.335, 0.3, 0.35, 1.0);\n"
    "}\n",

    "#version 100\n"    // 3szeg
    "void main() {\n"
    "   gl_FragColor = vec4(0.7, 0.5, 0.0, 1.0);\n"
    "}\n",
};


GLint cmpGLprg(const char *pVXshdr, const char *pFRshdr) {
    enum Consts {INFOLOG_LEN = 512};
    GLchar sLOG[INFOLOG_LEN];
    GLint iGLfr;
    GLint iGLprg;
    GLint iRES;
    GLint iGLvx;

    /* Vertex shader */
    iGLvx = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(iGLvx, 1, &pVXshdr, NULL);
    glCompileShader(iGLvx);
    glGetShaderiv(iGLvx, GL_COMPILE_STATUS, &iRES);
    if (!iRES) {
        glGetShaderInfoLog(iGLvx, INFOLOG_LEN, NULL, sLOG);
        printf("ERROR::SHADER::VERTEX::COMPILATION_FAILED\n%s\n", sLOG);
    }

    /* Fragment shader */
    iGLfr = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(iGLfr, 1, &pFRshdr, NULL);
    glCompileShader(iGLfr);
    glGetShaderiv(iGLfr, GL_COMPILE_STATUS, &iRES);
    if (!iRES) {
        glGetShaderInfoLog(iGLfr, INFOLOG_LEN, NULL, sLOG);
        printf("ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n%s\n", sLOG);
    }

    /* Link shaders */
    iGLprg = glCreateProgram();
    glAttachShader(iGLprg, iGLvx);
    glAttachShader(iGLprg, iGLfr);
    glLinkProgram(iGLprg);
    glGetProgramiv(iGLprg, GL_LINK_STATUS, &iRES);
    if (!iRES) {
        glGetProgramInfoLog(iGLprg, INFOLOG_LEN, NULL, sLOG);
        printf("ERROR::SHADER::PROGRAM::LINKING_FAILED\n%s\n", sLOG);
    }

    glDeleteShader(iGLvx);
    glDeleteShader(iGLfr);
    return iGLprg;
}
#define dNaKERix daN(aKERix)

int main( int nARG, char** ppARG ) {
    for( int i = nARG; i; i-- ) 
	    printf( "%d. \"%s\r\n", nARG-i,*(ppARG+nARG-i));

    glfwInit();
    glfwWindowHint(GLFW_CLIENT_API, GLFW_OPENGL_ES_API);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 2);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);
    GLFWwindow* pWND = glfwCreateWindow(WIDTH, HEIGHT, "3szeg", NULL, NULL);
    if( !pWND ) {
        printf( "%0.8x. not good!\r\n", pWND  );
        return EXIT_FAILURE;
    }
    printf( "pWND %0.8x\r\n", pWND  );
    glfwMakeContextCurrent(pWND);
    
    int iRIGO = 0, nPCK = 1*3, iPCK;
    GLuint  aiGLSLprg[dNaKERix*2],
            iGLvxb;
	GLint aiGLSLpos[dNaKERix*2];
    printf("GL_VERSION  : %s\n", glGetString(GL_VERSION) );
	printf("GL_RENDERER : %s\n", glGetString(GL_RENDERER) );

    for( int n = dNaKERix*2, i = 0; i < n; i++ ) {
        aiGLSLprg[i] = cmpGLprg(asGLSLvx[i/dNaKERix], asGLSLfr[i%dNaKERix]);
	    aiGLSLpos[i] = glGetAttribLocation(aiGLSLprg[i], "position");
    }
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	glViewport(0, 0, WIDTH, HEIGHT);

	glGenBuffers(1, &iGLvxb);
	glBindBuffer(GL_ARRAY_BUFFER, iGLvxb);
	glBufferData(GL_ARRAY_BUFFER, sizeof(aGPjUh3szeg), aGPjUh3szeg, GL_STATIC_DRAW);
	glVertexAttribPointer(aiGLSLpos[0], 3, GL_FLOAT, GL_FALSE, 0, (GLvoid*)0);
	glEnableVertexAttribArray(aiGLSLpos[0]);
	glBindBuffer(GL_ARRAY_BUFFER, 0);
    //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
    
    while (!glfwWindowShouldClose(pWND)) {
        // Ide jöhet az esemény ciklus!
        // De ablakot már nyit?
        glfwPollEvents();
        glClear(GL_COLOR_BUFFER_BIT);
        for( int i = dNaKERix*2, j; --i; ) { // !!! -> for( i=x*2; --i; üres )
            j = i-1;
            glUseProgram(aiGLSLprg[j]);
            j %= dNaKERix;    // maradékososztás a MŰVELET ami megóv a CIKLUSBAN{CIKLUS{}} rémségektől!!!!!!
		    glDrawArrays(GL_TRIANGLES, aKERix[j]*nPCK, (aKERix[i%dNaKERix]-aKERix[j])*nPCK );
            
        }

        iPCK = (iRIGO*nPCK) % n3szeg;
        glUseProgram(aiGLSLprg[daN(aiGLSLprg)-1]);
		glDrawArrays(GL_TRIANGLES, iPCK, dMIN( iPCK+nPCK,n3szeg )-iPCK );
        
        glfwSwapBuffers(pWND);
        printf( "iRIGO %0.8x\r\n", (iRIGO++)  );
    }

    glfwTerminate();
    return EXIT_SUCCESS;
}